{"version":3,"sources":["adler32.js"],"names":["adler32","adler","buf","len","pos","s1","s2","n"],"mappings":";;;;;;;AAAA;AACA;AACA;AAEe,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,GAAxB,EAA6BC,GAA7B,EAAkCC,GAAlC,EAAuC;AACpD,MAAIC,EAAE,GAAIJ,KAAK,GAAG,MAAT,GAAkB,CAA3B;AAAA,MACIK,EAAE,GAAKL,KAAK,KAAK,EAAX,GAAiB,MAAlB,GAA2B,CADpC;AAAA,MAEIM,CAAC,GAAG,CAFR;;AAIA,SAAOJ,GAAG,KAAK,CAAf,EAAkB;AAChB;AACA;AACA;AACAI,IAAAA,CAAC,GAAGJ,GAAG,GAAG,IAAN,GAAa,IAAb,GAAoBA,GAAxB;AACAA,IAAAA,GAAG,IAAII,CAAP;;AAEA,OAAG;AACDF,MAAAA,EAAE,GAAIA,EAAE,GAAGH,GAAG,CAACE,GAAG,EAAJ,CAAT,GAAmB,CAAxB;AACAE,MAAAA,EAAE,GAAIA,EAAE,GAAGD,EAAN,GAAW,CAAhB;AACD,KAHD,QAGS,EAAEE,CAHX;;AAKAF,IAAAA,EAAE,IAAI,KAAN;AACAC,IAAAA,EAAE,IAAI,KAAN;AACD;;AAED,SAAQD,EAAE,GAAIC,EAAE,IAAI,EAAb,GAAmB,CAA1B;AACD","sourcesContent":["// Note: adler32 takes 12% for level 0 and 2% for level 6.\r\n// It doesn't worth to make additional optimizationa as in original.\r\n// Small size is preferable.\r\n\r\nexport default function adler32(adler, buf, len, pos) {\r\n  var s1 = (adler & 0xffff) |0,\r\n      s2 = ((adler >>> 16) & 0xffff) |0,\r\n      n = 0;\r\n\r\n  while (len !== 0) {\r\n    // Set limit ~ twice less than 5552, to keep\r\n    // s2 in 31-bits, because we force signed ints.\r\n    // in other case %= will fail.\r\n    n = len > 2000 ? 2000 : len;\r\n    len -= n;\r\n\r\n    do {\r\n      s1 = (s1 + buf[pos++]) |0;\r\n      s2 = (s2 + s1) |0;\r\n    } while (--n);\r\n\r\n    s1 %= 65521;\r\n    s2 %= 65521;\r\n  }\r\n\r\n  return (s1 | (s2 << 16)) |0;\r\n}\r\n"]}