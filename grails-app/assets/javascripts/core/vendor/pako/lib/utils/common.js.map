{"version":3,"sources":["common.js"],"names":["shrinkBuf","buf","size","length","subarray","arraySet","dest","src","src_offs","len","dest_offs","set","i","flattenChunks","chunks","l","pos","chunk","result","Uint8Array","Buf8","Buf16","Uint16Array","Buf32","Int32Array"],"mappings":";;;;;;;;;;AAAA;AACO,SAASA,SAAT,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AACpC,MAAID,GAAG,CAACE,MAAJ,KAAeD,IAAnB,EAAyB;AAAE,WAAOD,GAAP;AAAa;;AACxC,MAAIA,GAAG,CAACG,QAAR,EAAkB;AAAE,WAAOH,GAAG,CAACG,QAAJ,CAAa,CAAb,EAAgBF,IAAhB,CAAP;AAA+B;;AACnDD,EAAAA,GAAG,CAACE,MAAJ,GAAaD,IAAb;AACA,SAAOD,GAAP;AACD;;AAAA;;AAGM,SAASI,QAAT,CAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,QAA9B,EAAwCC,GAAxC,EAA6CC,SAA7C,EAAwD;AAC7D,MAAIH,GAAG,CAACH,QAAJ,IAAgBE,IAAI,CAACF,QAAzB,EAAmC;AACjCE,IAAAA,IAAI,CAACK,GAAL,CAASJ,GAAG,CAACH,QAAJ,CAAaI,QAAb,EAAuBA,QAAQ,GAAGC,GAAlC,CAAT,EAAiDC,SAAjD;AACA;AACD,GAJ4D,CAK7D;;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC5BN,IAAAA,IAAI,CAACI,SAAS,GAAGE,CAAb,CAAJ,GAAsBL,GAAG,CAACC,QAAQ,GAAGI,CAAZ,CAAzB;AACD;AACF,C,CAED;;;AACO,SAASC,aAAT,CAAwBC,MAAxB,EAAgC;AACrC,MAAIF,CAAJ,EAAOG,CAAP,EAAUN,GAAV,EAAeO,GAAf,EAAoBC,KAApB,EAA2BC,MAA3B,CADqC,CAGrC;;AACAT,EAAAA,GAAG,GAAG,CAAN;;AACA,OAAKG,CAAC,GAAG,CAAJ,EAAOG,CAAC,GAAGD,MAAM,CAACX,MAAvB,EAA+BS,CAAC,GAAGG,CAAnC,EAAsCH,CAAC,EAAvC,EAA2C;AACzCH,IAAAA,GAAG,IAAIK,MAAM,CAACF,CAAD,CAAN,CAAUT,MAAjB;AACD,GAPoC,CASrC;;;AACAe,EAAAA,MAAM,GAAG,IAAIC,UAAJ,CAAeV,GAAf,CAAT;AACAO,EAAAA,GAAG,GAAG,CAAN;;AACA,OAAKJ,CAAC,GAAG,CAAJ,EAAOG,CAAC,GAAGD,MAAM,CAACX,MAAvB,EAA+BS,CAAC,GAAGG,CAAnC,EAAsCH,CAAC,EAAvC,EAA2C;AACzCK,IAAAA,KAAK,GAAGH,MAAM,CAACF,CAAD,CAAd;AACAM,IAAAA,MAAM,CAACP,GAAP,CAAWM,KAAX,EAAkBD,GAAlB;AACAA,IAAAA,GAAG,IAAIC,KAAK,CAACd,MAAb;AACD;;AAED,SAAOe,MAAP;AACD;;AAEM,IAAIE,IAAI,GAAID,UAAZ;;AACA,IAAIE,KAAK,GAAGC,WAAZ;;AACA,IAAIC,KAAK,GAAGC,UAAZ","sourcesContent":["// reduce buffer size, avoiding mem copy\r\nexport function shrinkBuf (buf, size) {\r\n  if (buf.length === size) { return buf; }\r\n  if (buf.subarray) { return buf.subarray(0, size); }\r\n  buf.length = size;\r\n  return buf;\r\n};\r\n\r\n\r\nexport function arraySet (dest, src, src_offs, len, dest_offs) {\r\n  if (src.subarray && dest.subarray) {\r\n    dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\r\n    return;\r\n  }\r\n  // Fallback to ordinary array\r\n  for (var i = 0; i < len; i++) {\r\n    dest[dest_offs + i] = src[src_offs + i];\r\n  }\r\n}\r\n\r\n// Join array of chunks to single array.\r\nexport function flattenChunks (chunks) {\r\n  var i, l, len, pos, chunk, result;\r\n\r\n  // calculate data length\r\n  len = 0;\r\n  for (i = 0, l = chunks.length; i < l; i++) {\r\n    len += chunks[i].length;\r\n  }\r\n\r\n  // join chunks\r\n  result = new Uint8Array(len);\r\n  pos = 0;\r\n  for (i = 0, l = chunks.length; i < l; i++) {\r\n    chunk = chunks[i];\r\n    result.set(chunk, pos);\r\n    pos += chunk.length;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport var Buf8  = Uint8Array;\r\nexport var Buf16 = Uint16Array;\r\nexport var Buf32 = Int32Array;\r\n"]}