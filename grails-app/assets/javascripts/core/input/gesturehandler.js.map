{"version":3,"sources":["gesturehandler.js"],"names":["GH_NOGESTURE","GH_ONETAP","GH_TWOTAP","GH_THREETAP","GH_DRAG","GH_LONGPRESS","GH_TWODRAG","GH_PINCH","GH_INITSTATE","GH_MOVE_THRESHOLD","GH_ANGLE_THRESHOLD","GH_MULTITOUCH_TIMEOUT","GH_TAP_TIMEOUT","GH_LONGPRESS_TIMEOUT","GH_TWOTOUCH_TIMEOUT","GestureHandler","_target","_state","_tracked","_ignored","_waitingRelease","_releaseStart","_longpressTimeoutId","_twoTouchTimeoutId","_boundEventHandler","_eventHandler","bind","target","detach","addEventListener","_stopLongpressTimeout","_stopTwoTouchTimeout","removeEventListener","e","fn","stopPropagation","preventDefault","type","_touchStart","_touchMove","_touchEnd","i","changedTouches","length","touch","call","identifier","clientX","clientY","id","x","y","_hasDetectedGesture","push","Date","now","started","active","firstX","firstY","lastX","lastY","angle","_startLongpressTimeout","find","t","undefined","deltaX","deltaY","Math","atan2","PI","hypot","prevTouch","prevDeltaMove","deltaAngle","abs","_isTwoTouchTimeoutRunning","_startTwoTouchTimeout","_pushEvent","indexOf","splice","some","setTimeout","_longpressTimeout","clearTimeout","Error","_twoTouchTimeout","avgM","_getAverageMovement","avgMoveH","avgMoveV","avgD","_getAverageDistance","deltaTouchDistance","first","last","detail","_stateToGesture","avg","_getPosition","pos","distance","movement","gev","CustomEvent","dispatchEvent","state","size","fx","fy","lx","ly","totalH","totalV","fdx","fdy","ldx","ldy"],"mappings":"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","sourcesContent":["/*\r\n * noVNC: HTML5 VNC client\r\n * Copyright (C) 2020 The noVNC Authors\r\n * Licensed under MPL 2.0 (see LICENSE.txt)\r\n *\r\n * See README.md for usage and integration instructions.\r\n *\r\n */\r\n\r\nconst GH_NOGESTURE = 0;\r\nconst GH_ONETAP    = 1;\r\nconst GH_TWOTAP    = 2;\r\nconst GH_THREETAP  = 4;\r\nconst GH_DRAG      = 8;\r\nconst GH_LONGPRESS = 16;\r\nconst GH_TWODRAG   = 32;\r\nconst GH_PINCH     = 64;\r\n\r\nconst GH_INITSTATE = 127;\r\n\r\nconst GH_MOVE_THRESHOLD = 50;\r\nconst GH_ANGLE_THRESHOLD = 90; // Degrees\r\n\r\n// Timeout when waiting for gestures (ms)\r\nconst GH_MULTITOUCH_TIMEOUT = 250;\r\n\r\n// Maximum time between press and release for a tap (ms)\r\nconst GH_TAP_TIMEOUT = 1000;\r\n\r\n// Timeout when waiting for longpress (ms)\r\nconst GH_LONGPRESS_TIMEOUT = 1000;\r\n\r\n// Timeout when waiting to decide between PINCH and TWODRAG (ms)\r\nconst GH_TWOTOUCH_TIMEOUT = 50;\r\n\r\nexport default class GestureHandler {\r\n    constructor() {\r\n        this._target = null;\r\n\r\n        this._state = GH_INITSTATE;\r\n\r\n        this._tracked = [];\r\n        this._ignored = [];\r\n\r\n        this._waitingRelease = false;\r\n        this._releaseStart = 0.0;\r\n\r\n        this._longpressTimeoutId = null;\r\n        this._twoTouchTimeoutId = null;\r\n\r\n        this._boundEventHandler = this._eventHandler.bind(this);\r\n    }\r\n\r\n    attach(target) {\r\n        this.detach();\r\n\r\n        this._target = target;\r\n        this._target.addEventListener('touchstart',\r\n                                      this._boundEventHandler);\r\n        this._target.addEventListener('touchmove',\r\n                                      this._boundEventHandler);\r\n        this._target.addEventListener('touchend',\r\n                                      this._boundEventHandler);\r\n        this._target.addEventListener('touchcancel',\r\n                                      this._boundEventHandler);\r\n    }\r\n\r\n    detach() {\r\n        if (!this._target) {\r\n            return;\r\n        }\r\n\r\n        this._stopLongpressTimeout();\r\n        this._stopTwoTouchTimeout();\r\n\r\n        this._target.removeEventListener('touchstart',\r\n                                         this._boundEventHandler);\r\n        this._target.removeEventListener('touchmove',\r\n                                         this._boundEventHandler);\r\n        this._target.removeEventListener('touchend',\r\n                                         this._boundEventHandler);\r\n        this._target.removeEventListener('touchcancel',\r\n                                         this._boundEventHandler);\r\n        this._target = null;\r\n    }\r\n\r\n    _eventHandler(e) {\r\n        let fn;\r\n\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        switch (e.type) {\r\n            case 'touchstart':\r\n                fn = this._touchStart;\r\n                break;\r\n            case 'touchmove':\r\n                fn = this._touchMove;\r\n                break;\r\n            case 'touchend':\r\n            case 'touchcancel':\r\n                fn = this._touchEnd;\r\n                break;\r\n        }\r\n\r\n        for (let i = 0; i < e.changedTouches.length; i++) {\r\n            let touch = e.changedTouches[i];\r\n            fn.call(this, touch.identifier, touch.clientX, touch.clientY);\r\n        }\r\n    }\r\n\r\n    _touchStart(id, x, y) {\r\n        // Ignore any new touches if there is already an active gesture,\r\n        // or we're in a cleanup state\r\n        if (this._hasDetectedGesture() || (this._state === GH_NOGESTURE)) {\r\n            this._ignored.push(id);\r\n            return;\r\n        }\r\n\r\n        // Did it take too long between touches that we should no longer\r\n        // consider this a single gesture?\r\n        if ((this._tracked.length > 0) &&\r\n            ((Date.now() - this._tracked[0].started) > GH_MULTITOUCH_TIMEOUT)) {\r\n            this._state = GH_NOGESTURE;\r\n            this._ignored.push(id);\r\n            return;\r\n        }\r\n\r\n        // If we're waiting for fingers to release then we should no longer\r\n        // recognize new touches\r\n        if (this._waitingRelease) {\r\n            this._state = GH_NOGESTURE;\r\n            this._ignored.push(id);\r\n            return;\r\n        }\r\n\r\n        this._tracked.push({\r\n            id: id,\r\n            started: Date.now(),\r\n            active: true,\r\n            firstX: x,\r\n            firstY: y,\r\n            lastX: x,\r\n            lastY: y,\r\n            angle: 0\r\n        });\r\n\r\n        switch (this._tracked.length) {\r\n            case 1:\r\n                this._startLongpressTimeout();\r\n                break;\r\n\r\n            case 2:\r\n                this._state &= ~(GH_ONETAP | GH_DRAG | GH_LONGPRESS);\r\n                this._stopLongpressTimeout();\r\n                break;\r\n\r\n            case 3:\r\n                this._state &= ~(GH_TWOTAP | GH_TWODRAG | GH_PINCH);\r\n                break;\r\n\r\n            default:\r\n                this._state = GH_NOGESTURE;\r\n        }\r\n    }\r\n\r\n    _touchMove(id, x, y) {\r\n        let touch = this._tracked.find(t => t.id === id);\r\n\r\n        // If this is an update for a touch we're not tracking, ignore it\r\n        if (touch === undefined) {\r\n            return;\r\n        }\r\n\r\n        // Update the touches last position with the event coordinates\r\n        touch.lastX = x;\r\n        touch.lastY = y;\r\n\r\n        let deltaX = x - touch.firstX;\r\n        let deltaY = y - touch.firstY;\r\n\r\n        // Update angle when the touch has moved\r\n        if ((touch.firstX !== touch.lastX) ||\r\n            (touch.firstY !== touch.lastY)) {\r\n            touch.angle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;\r\n        }\r\n\r\n        if (!this._hasDetectedGesture()) {\r\n            // Ignore moves smaller than the minimum threshold\r\n            if (Math.hypot(deltaX, deltaY) < GH_MOVE_THRESHOLD) {\r\n                return;\r\n            }\r\n\r\n            // Can't be a tap or long press as we've seen movement\r\n            this._state &= ~(GH_ONETAP | GH_TWOTAP | GH_THREETAP | GH_LONGPRESS);\r\n            this._stopLongpressTimeout();\r\n\r\n            if (this._tracked.length !== 1) {\r\n                this._state &= ~(GH_DRAG);\r\n            }\r\n            if (this._tracked.length !== 2) {\r\n                this._state &= ~(GH_TWODRAG | GH_PINCH);\r\n            }\r\n\r\n            // We need to figure out which of our different two touch gestures\r\n            // this might be\r\n            if (this._tracked.length === 2) {\r\n\r\n                // The other touch is the one where the id doesn't match\r\n                let prevTouch = this._tracked.find(t => t.id !== id);\r\n\r\n                // How far the previous touch point has moved since start\r\n                let prevDeltaMove = Math.hypot(prevTouch.firstX - prevTouch.lastX,\r\n                                               prevTouch.firstY - prevTouch.lastY);\r\n\r\n                // We know that the current touch moved far enough,\r\n                // but unless both touches moved further than their\r\n                // threshold we don't want to disqualify any gestures\r\n                if (prevDeltaMove > GH_MOVE_THRESHOLD) {\r\n\r\n                    // The angle difference between the direction of the touch points\r\n                    let deltaAngle = Math.abs(touch.angle - prevTouch.angle);\r\n                    deltaAngle = Math.abs(((deltaAngle + 180) % 360) - 180);\r\n\r\n                    // PINCH or TWODRAG can be eliminated depending on the angle\r\n                    if (deltaAngle > GH_ANGLE_THRESHOLD) {\r\n                        this._state &= ~GH_TWODRAG;\r\n                    } else {\r\n                        this._state &= ~GH_PINCH;\r\n                    }\r\n\r\n                    if (this._isTwoTouchTimeoutRunning()) {\r\n                        this._stopTwoTouchTimeout();\r\n                    }\r\n                } else if (!this._isTwoTouchTimeoutRunning()) {\r\n                    // We can't determine the gesture right now, let's\r\n                    // wait and see if more events are on their way\r\n                    this._startTwoTouchTimeout();\r\n                }\r\n            }\r\n\r\n            if (!this._hasDetectedGesture()) {\r\n                return;\r\n            }\r\n\r\n            this._pushEvent('gesturestart');\r\n        }\r\n\r\n        this._pushEvent('gesturemove');\r\n    }\r\n\r\n    _touchEnd(id, x, y) {\r\n        // Check if this is an ignored touch\r\n        if (this._ignored.indexOf(id) !== -1) {\r\n            // Remove this touch from ignored\r\n            this._ignored.splice(this._ignored.indexOf(id), 1);\r\n\r\n            // And reset the state if there are no more touches\r\n            if ((this._ignored.length === 0) &&\r\n                (this._tracked.length === 0)) {\r\n                this._state = GH_INITSTATE;\r\n                this._waitingRelease = false;\r\n            }\r\n            return;\r\n        }\r\n\r\n        // We got a touchend before the timer triggered,\r\n        // this cannot result in a gesture anymore.\r\n        if (!this._hasDetectedGesture() &&\r\n            this._isTwoTouchTimeoutRunning()) {\r\n            this._stopTwoTouchTimeout();\r\n            this._state = GH_NOGESTURE;\r\n        }\r\n\r\n        // Some gestures don't trigger until a touch is released\r\n        if (!this._hasDetectedGesture()) {\r\n            // Can't be a gesture that relies on movement\r\n            this._state &= ~(GH_DRAG | GH_TWODRAG | GH_PINCH);\r\n            // Or something that relies on more time\r\n            this._state &= ~GH_LONGPRESS;\r\n            this._stopLongpressTimeout();\r\n\r\n            if (!this._waitingRelease) {\r\n                this._releaseStart = Date.now();\r\n                this._waitingRelease = true;\r\n\r\n                // Can't be a tap that requires more touches than we current have\r\n                switch (this._tracked.length) {\r\n                    case 1:\r\n                        this._state &= ~(GH_TWOTAP | GH_THREETAP);\r\n                        break;\r\n\r\n                    case 2:\r\n                        this._state &= ~(GH_ONETAP | GH_THREETAP);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Waiting for all touches to release? (i.e. some tap)\r\n        if (this._waitingRelease) {\r\n            // Were all touches released at roughly the same time?\r\n            if ((Date.now() - this._releaseStart) > GH_MULTITOUCH_TIMEOUT) {\r\n                this._state = GH_NOGESTURE;\r\n            }\r\n\r\n            // Did too long time pass between press and release?\r\n            if (this._tracked.some(t => (Date.now() - t.started) > GH_TAP_TIMEOUT)) {\r\n                this._state = GH_NOGESTURE;\r\n            }\r\n\r\n            let touch = this._tracked.find(t => t.id === id);\r\n            touch.active = false;\r\n\r\n            // Are we still waiting for more releases?\r\n            if (this._hasDetectedGesture()) {\r\n                this._pushEvent('gesturestart');\r\n            } else {\r\n                // Have we reached a dead end?\r\n                if (this._state !== GH_NOGESTURE) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this._hasDetectedGesture()) {\r\n            this._pushEvent('gestureend');\r\n        }\r\n\r\n        // Ignore any remaining touches until they are ended\r\n        for (let i = 0; i < this._tracked.length; i++) {\r\n            if (this._tracked[i].active) {\r\n                this._ignored.push(this._tracked[i].id);\r\n            }\r\n        }\r\n        this._tracked = [];\r\n\r\n        this._state = GH_NOGESTURE;\r\n\r\n        // Remove this touch from ignored if it's in there\r\n        if (this._ignored.indexOf(id) !== -1) {\r\n            this._ignored.splice(this._ignored.indexOf(id), 1);\r\n        }\r\n\r\n        // We reset the state if ignored is empty\r\n        if ((this._ignored.length === 0)) {\r\n            this._state = GH_INITSTATE;\r\n            this._waitingRelease = false;\r\n        }\r\n    }\r\n\r\n    _hasDetectedGesture() {\r\n        if (this._state === GH_NOGESTURE) {\r\n            return false;\r\n        }\r\n        // Check to see if the bitmask value is a power of 2\r\n        // (i.e. only one bit set). If it is, we have a state.\r\n        if (this._state & (this._state - 1)) {\r\n            return false;\r\n        }\r\n\r\n        // For taps we also need to have all touches released\r\n        // before we've fully detected the gesture\r\n        if (this._state & (GH_ONETAP | GH_TWOTAP | GH_THREETAP)) {\r\n            if (this._tracked.some(t => t.active)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    _startLongpressTimeout() {\r\n        this._stopLongpressTimeout();\r\n        this._longpressTimeoutId = setTimeout(() => this._longpressTimeout(),\r\n                                              GH_LONGPRESS_TIMEOUT);\r\n    }\r\n\r\n    _stopLongpressTimeout() {\r\n        clearTimeout(this._longpressTimeoutId);\r\n        this._longpressTimeoutId = null;\r\n    }\r\n\r\n    _longpressTimeout() {\r\n        if (this._hasDetectedGesture()) {\r\n            throw new Error(\"A longpress gesture failed, conflict with a different gesture\");\r\n        }\r\n\r\n        this._state = GH_LONGPRESS;\r\n        this._pushEvent('gesturestart');\r\n    }\r\n\r\n    _startTwoTouchTimeout() {\r\n        this._stopTwoTouchTimeout();\r\n        this._twoTouchTimeoutId = setTimeout(() => this._twoTouchTimeout(),\r\n                                             GH_TWOTOUCH_TIMEOUT);\r\n    }\r\n\r\n    _stopTwoTouchTimeout() {\r\n        clearTimeout(this._twoTouchTimeoutId);\r\n        this._twoTouchTimeoutId = null;\r\n    }\r\n\r\n    _isTwoTouchTimeoutRunning() {\r\n        return this._twoTouchTimeoutId !== null;\r\n    }\r\n\r\n    _twoTouchTimeout() {\r\n        if (this._tracked.length === 0) {\r\n            throw new Error(\"A pinch or two drag gesture failed, no tracked touches\");\r\n        }\r\n\r\n        // How far each touch point has moved since start\r\n        let avgM = this._getAverageMovement();\r\n        let avgMoveH = Math.abs(avgM.x);\r\n        let avgMoveV = Math.abs(avgM.y);\r\n\r\n        // The difference in the distance between where\r\n        // the touch points started and where they are now\r\n        let avgD = this._getAverageDistance();\r\n        let deltaTouchDistance = Math.abs(Math.hypot(avgD.first.x, avgD.first.y) -\r\n                                          Math.hypot(avgD.last.x, avgD.last.y));\r\n\r\n        if ((avgMoveV < deltaTouchDistance) &&\r\n            (avgMoveH < deltaTouchDistance)) {\r\n            this._state = GH_PINCH;\r\n        } else {\r\n            this._state = GH_TWODRAG;\r\n        }\r\n\r\n        this._pushEvent('gesturestart');\r\n        this._pushEvent('gesturemove');\r\n    }\r\n\r\n    _pushEvent(type) {\r\n        let detail = { type: this._stateToGesture(this._state) };\r\n\r\n        // For most gesture events the current (average) position is the\r\n        // most useful\r\n        let avg = this._getPosition();\r\n        let pos = avg.last;\r\n\r\n        // However we have a slight distance to detect gestures, so for the\r\n        // first gesture event we want to use the first positions we saw\r\n        if (type === 'gesturestart') {\r\n            pos = avg.first;\r\n        }\r\n\r\n        // For these gestures, we always want the event coordinates\r\n        // to be where the gesture began, not the current touch location.\r\n        switch (this._state) {\r\n            case GH_TWODRAG:\r\n            case GH_PINCH:\r\n                pos = avg.first;\r\n                break;\r\n        }\r\n\r\n        detail['clientX'] = pos.x;\r\n        detail['clientY'] = pos.y;\r\n\r\n        // FIXME: other coordinates?\r\n\r\n        // Some gestures also have a magnitude\r\n        if (this._state === GH_PINCH) {\r\n            let distance = this._getAverageDistance();\r\n            if (type === 'gesturestart') {\r\n                detail['magnitudeX'] = distance.first.x;\r\n                detail['magnitudeY'] = distance.first.y;\r\n            } else {\r\n                detail['magnitudeX'] = distance.last.x;\r\n                detail['magnitudeY'] = distance.last.y;\r\n            }\r\n        } else if (this._state === GH_TWODRAG) {\r\n            if (type === 'gesturestart') {\r\n                detail['magnitudeX'] = 0.0;\r\n                detail['magnitudeY'] = 0.0;\r\n            } else {\r\n                let movement = this._getAverageMovement();\r\n                detail['magnitudeX'] = movement.x;\r\n                detail['magnitudeY'] = movement.y;\r\n            }\r\n        }\r\n\r\n        let gev = new CustomEvent(type, { detail: detail });\r\n        this._target.dispatchEvent(gev);\r\n    }\r\n\r\n    _stateToGesture(state) {\r\n        switch (state) {\r\n            case GH_ONETAP:\r\n                return 'onetap';\r\n            case GH_TWOTAP:\r\n                return 'twotap';\r\n            case GH_THREETAP:\r\n                return 'threetap';\r\n            case GH_DRAG:\r\n                return 'drag';\r\n            case GH_LONGPRESS:\r\n                return 'longpress';\r\n            case GH_TWODRAG:\r\n                return 'twodrag';\r\n            case GH_PINCH:\r\n                return 'pinch';\r\n        }\r\n\r\n        throw new Error(\"Unknown gesture state: \" + state);\r\n    }\r\n\r\n    _getPosition() {\r\n        if (this._tracked.length === 0) {\r\n            throw new Error(\"Failed to get gesture position, no tracked touches\");\r\n        }\r\n\r\n        let size = this._tracked.length;\r\n        let fx = 0, fy = 0, lx = 0, ly = 0;\r\n\r\n        for (let i = 0; i < this._tracked.length; i++) {\r\n            fx += this._tracked[i].firstX;\r\n            fy += this._tracked[i].firstY;\r\n            lx += this._tracked[i].lastX;\r\n            ly += this._tracked[i].lastY;\r\n        }\r\n\r\n        return { first: { x: fx / size,\r\n                          y: fy / size },\r\n                 last: { x: lx / size,\r\n                         y: ly / size } };\r\n    }\r\n\r\n    _getAverageMovement() {\r\n        if (this._tracked.length === 0) {\r\n            throw new Error(\"Failed to get gesture movement, no tracked touches\");\r\n        }\r\n\r\n        let totalH, totalV;\r\n        totalH = totalV = 0;\r\n        let size = this._tracked.length;\r\n\r\n        for (let i = 0; i < this._tracked.length; i++) {\r\n            totalH += this._tracked[i].lastX - this._tracked[i].firstX;\r\n            totalV += this._tracked[i].lastY - this._tracked[i].firstY;\r\n        }\r\n\r\n        return { x: totalH / size,\r\n                 y: totalV / size };\r\n    }\r\n\r\n    _getAverageDistance() {\r\n        if (this._tracked.length === 0) {\r\n            throw new Error(\"Failed to get gesture distance, no tracked touches\");\r\n        }\r\n\r\n        // Distance between the first and last tracked touches\r\n\r\n        let first = this._tracked[0];\r\n        let last = this._tracked[this._tracked.length - 1];\r\n\r\n        let fdx = Math.abs(last.firstX - first.firstX);\r\n        let fdy = Math.abs(last.firstY - first.firstY);\r\n\r\n        let ldx = Math.abs(last.lastX - first.lastX);\r\n        let ldy = Math.abs(last.lastY - first.lastY);\r\n\r\n        return { first: { x: fdx, y: fdy },\r\n                 last: { x: ldx, y: ldy } };\r\n    }\r\n}\r\n"]}