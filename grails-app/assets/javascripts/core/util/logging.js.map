{"version":3,"sources":["logging.js"],"names":["_logLevel","Debug","Info","Warn","Error","initLogging","level","window","console","debug","bind","info","warn","error","getLogging"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,IAAIA,SAAS,GAAG,MAAhB;;AAEA,IAAIC,KAAK,GAAG,iBAAM,CAAE,CAApB;;;;AACA,IAAIC,IAAI,GAAG,gBAAM,CAAE,CAAnB;;;;AACA,IAAIC,IAAI,GAAG,gBAAM,CAAE,CAAnB;;;;AACA,IAAIC,KAAK,GAAG,iBAAM,CAAE,CAApB;;;;AAEO,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC/B,MAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;AAC9BA,IAAAA,KAAK,GAAGN,SAAR;AACH,GAFD,MAEO;AACHA,IAAAA,SAAS,GAAGM,KAAZ;AACH;;AAED,kBAAAL,KAAK,kBAAGC,IAAI,kBAAGC,IAAI,mBAAGC,KAAK,GAAG,iBAAM,CAAE,CAAtC;;AAEA,MAAI,OAAOG,MAAM,CAACC,OAAd,KAA0B,WAA9B,EAA2C;AACvC;AACA,YAAQF,KAAR;AACI,WAAK,OAAL;AACI,wBAAAL,KAAK,GAAGO,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBH,MAAM,CAACC,OAA1B,CAAR;;AACJ,WAAK,MAAL;AACI,uBAAAN,IAAI,GAAIM,OAAO,CAACG,IAAR,CAAaD,IAAb,CAAkBH,MAAM,CAACC,OAAzB,CAAR;;AACJ,WAAK,MAAL;AACI,uBAAAL,IAAI,GAAIK,OAAO,CAACI,IAAR,CAAaF,IAAb,CAAkBH,MAAM,CAACC,OAAzB,CAAR;;AACJ,WAAK,OAAL;AACI,wBAAAJ,KAAK,GAAGI,OAAO,CAACK,KAAR,CAAcH,IAAd,CAAmBH,MAAM,CAACC,OAA1B,CAAR;;AACJ,WAAK,MAAL;AACI;;AACJ;AACI,cAAM,IAAID,MAAM,CAACH,KAAX,CAAiB,2BAA2BE,KAA3B,GAAmC,GAApD,CAAN;AAZR;AAcA;;AACH;AACJ;;AAEM,SAASQ,UAAT,GAAsB;AACzB,SAAOd,SAAP;AACH;;AAID;AACAK,WAAW","sourcesContent":["/*\r\n * noVNC: HTML5 VNC client\r\n * Copyright (C) 2019 The noVNC Authors\r\n * Licensed under MPL 2.0 (see LICENSE.txt)\r\n *\r\n * See README.md for usage and integration instructions.\r\n */\r\n\r\n/*\r\n * Logging/debug routines\r\n */\r\n\r\nlet _logLevel = 'warn';\r\n\r\nlet Debug = () => {};\r\nlet Info = () => {};\r\nlet Warn = () => {};\r\nlet Error = () => {};\r\n\r\nexport function initLogging(level) {\r\n    if (typeof level === 'undefined') {\r\n        level = _logLevel;\r\n    } else {\r\n        _logLevel = level;\r\n    }\r\n\r\n    Debug = Info = Warn = Error = () => {};\r\n\r\n    if (typeof window.console !== \"undefined\") {\r\n        /* eslint-disable no-console, no-fallthrough */\r\n        switch (level) {\r\n            case 'debug':\r\n                Debug = console.debug.bind(window.console);\r\n            case 'info':\r\n                Info  = console.info.bind(window.console);\r\n            case 'warn':\r\n                Warn  = console.warn.bind(window.console);\r\n            case 'error':\r\n                Error = console.error.bind(window.console);\r\n            case 'none':\r\n                break;\r\n            default:\r\n                throw new window.Error(\"invalid logging type '\" + level + \"'\");\r\n        }\r\n        /* eslint-enable no-console, no-fallthrough */\r\n    }\r\n}\r\n\r\nexport function getLogging() {\r\n    return _logLevel;\r\n}\r\n\r\nexport { Debug, Info, Warn, Error };\r\n\r\n// Initialize logging level\r\ninitLogging();\r\n"]}