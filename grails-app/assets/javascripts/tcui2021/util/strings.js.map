{"version":3,"sources":["strings.js"],"names":["decodeUTF8","utf8string","allowLatin1","decodeURIComponent","escape","e","URIError","encodeUTF8","DOMString","unescape","encodeURIComponent"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACO,SAASA,UAAT,CAAoBC,UAApB,EAAmD;AAAA,MAAnBC,WAAmB,uEAAP,KAAO;;AACtD,MAAI;AACA,WAAOC,kBAAkB,CAACC,MAAM,CAACH,UAAD,CAAP,CAAzB;AACH,GAFD,CAEE,OAAOI,CAAP,EAAU;AACR,QAAIA,CAAC,YAAYC,QAAjB,EAA2B;AACvB,UAAIJ,WAAJ,EAAiB;AACb;AACA;AACA,eAAOD,UAAP;AACH;AACJ;;AACD,UAAMI,CAAN;AACH;AACJ,C,CAED;;;AACO,SAASE,UAAT,CAAoBC,SAApB,EAA+B;AAClC,SAAOC,QAAQ,CAACC,kBAAkB,CAACF,SAAD,CAAnB,CAAf;AACH","sourcesContent":["/*\r\n * noVNC: HTML5 VNC client\r\n * Copyright (C) 2019 The noVNC Authors\r\n * Licensed under MPL 2.0 (see LICENSE.txt)\r\n *\r\n * See README.md for usage and integration instructions.\r\n */\r\n\r\n// Decode from UTF-8\r\nexport function decodeUTF8(utf8string, allowLatin1=false) {\r\n    try {\r\n        return decodeURIComponent(escape(utf8string));\r\n    } catch (e) {\r\n        if (e instanceof URIError) {\r\n            if (allowLatin1) {\r\n                // If we allow Latin1 we can ignore any decoding fails\r\n                // and in these cases return the original string\r\n                return utf8string;\r\n            }\r\n        }\r\n        throw e;\r\n    }\r\n}\r\n\r\n// Encode to UTF-8\r\nexport function encodeUTF8(DOMString) {\r\n    return unescape(encodeURIComponent(DOMString));\r\n}\r\n"]}