{"version":3,"sources":["tight.js"],"names":["TightDecoder","_ctl","_filter","_numColors","_palette","Uint8Array","_len","_zlibs","i","Inflator","x","y","width","height","sock","display","depth","rQwait","rQshift8","reset","Log","Info","ret","_fillRect","_jpegRect","_pngRect","_basicRect","Error","rQi","rQ","fillRect","rQskipBytes","data","_readData","imageRect","ctl","streamId","_copyFilter","_paletteFilter","_gradientFilter","uncompressedSize","rQshiftBytes","setInput","inflate","rgbx","j","blitImage","numColors","rQpeek8","paletteSize","rQshiftTo","bpp","rowSize","Math","floor","_monoRect","_paletteRect","palette","dest","_getScratchBuffer","w","w1","dp","sp","b","total","byte","size","_scratchBuffer","length"],"mappings":"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","sourcesContent":["/*\r\n * noVNC: HTML5 VNC client\r\n * Copyright (C) 2019 The noVNC Authors\r\n * (c) 2012 Michael Tinglof, Joe Balaz, Les Piech (Mercuri.ca)\r\n * Licensed under MPL 2.0 (see LICENSE.txt)\r\n *\r\n * See README.md for usage and integration instructions.\r\n *\r\n */\r\n\r\nimport * as Log from '../util/logging.js';\r\nimport Inflator from \"../inflator.js\";\r\n\r\nexport default class TightDecoder {\r\n    constructor() {\r\n        this._ctl = null;\r\n        this._filter = null;\r\n        this._numColors = 0;\r\n        this._palette = new Uint8Array(1024);  // 256 * 4 (max palette size * max bytes-per-pixel)\r\n        this._len = 0;\r\n\r\n        this._zlibs = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            this._zlibs[i] = new Inflator();\r\n        }\r\n    }\r\n\r\n    decodeRect(x, y, width, height, sock, display, depth) {\r\n        if (this._ctl === null) {\r\n            if (sock.rQwait(\"TIGHT compression-control\", 1)) {\r\n                return false;\r\n            }\r\n\r\n            this._ctl = sock.rQshift8();\r\n\r\n            // Reset streams if the server requests it\r\n            for (let i = 0; i < 4; i++) {\r\n                if ((this._ctl >> i) & 1) {\r\n                    this._zlibs[i].reset();\r\n                    Log.Info(\"Reset zlib stream \" + i);\r\n                }\r\n            }\r\n\r\n            // Figure out filter\r\n            this._ctl = this._ctl >> 4;\r\n        }\r\n\r\n        let ret;\r\n\r\n        if (this._ctl === 0x08) {\r\n            ret = this._fillRect(x, y, width, height,\r\n                                 sock, display, depth);\r\n        } else if (this._ctl === 0x09) {\r\n            ret = this._jpegRect(x, y, width, height,\r\n                                 sock, display, depth);\r\n        } else if (this._ctl === 0x0A) {\r\n            ret = this._pngRect(x, y, width, height,\r\n                                sock, display, depth);\r\n        } else if ((this._ctl & 0x08) == 0) {\r\n            ret = this._basicRect(this._ctl, x, y, width, height,\r\n                                  sock, display, depth);\r\n        } else {\r\n            throw new Error(\"Illegal tight compression received (ctl: \" +\r\n                                   this._ctl + \")\");\r\n        }\r\n\r\n        if (ret) {\r\n            this._ctl = null;\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    _fillRect(x, y, width, height, sock, display, depth) {\r\n        if (sock.rQwait(\"TIGHT\", 3)) {\r\n            return false;\r\n        }\r\n\r\n        const rQi = sock.rQi;\r\n        const rQ = sock.rQ;\r\n\r\n        display.fillRect(x, y, width, height,\r\n                         [rQ[rQi], rQ[rQi + 1], rQ[rQi + 2]], false);\r\n        sock.rQskipBytes(3);\r\n\r\n        return true;\r\n    }\r\n\r\n    _jpegRect(x, y, width, height, sock, display, depth) {\r\n        let data = this._readData(sock);\r\n        if (data === null) {\r\n            return false;\r\n        }\r\n\r\n        display.imageRect(x, y, width, height, \"image/jpeg\", data);\r\n\r\n        return true;\r\n    }\r\n\r\n    _pngRect(x, y, width, height, sock, display, depth) {\r\n        throw new Error(\"PNG received in standard Tight rect\");\r\n    }\r\n\r\n    _basicRect(ctl, x, y, width, height, sock, display, depth) {\r\n        if (this._filter === null) {\r\n            if (ctl & 0x4) {\r\n                if (sock.rQwait(\"TIGHT\", 1)) {\r\n                    return false;\r\n                }\r\n\r\n                this._filter = sock.rQshift8();\r\n            } else {\r\n                // Implicit CopyFilter\r\n                this._filter = 0;\r\n            }\r\n        }\r\n\r\n        let streamId = ctl & 0x3;\r\n\r\n        let ret;\r\n\r\n        switch (this._filter) {\r\n            case 0: // CopyFilter\r\n                ret = this._copyFilter(streamId, x, y, width, height,\r\n                                       sock, display, depth);\r\n                break;\r\n            case 1: // PaletteFilter\r\n                ret = this._paletteFilter(streamId, x, y, width, height,\r\n                                          sock, display, depth);\r\n                break;\r\n            case 2: // GradientFilter\r\n                ret = this._gradientFilter(streamId, x, y, width, height,\r\n                                           sock, display, depth);\r\n                break;\r\n            default:\r\n                throw new Error(\"Illegal tight filter received (ctl: \" +\r\n                                       this._filter + \")\");\r\n        }\r\n\r\n        if (ret) {\r\n            this._filter = null;\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    _copyFilter(streamId, x, y, width, height, sock, display, depth) {\r\n        const uncompressedSize = width * height * 3;\r\n        let data;\r\n\r\n        if (uncompressedSize === 0) {\r\n            return true;\r\n        }\r\n\r\n        if (uncompressedSize < 12) {\r\n            if (sock.rQwait(\"TIGHT\", uncompressedSize)) {\r\n                return false;\r\n            }\r\n\r\n            data = sock.rQshiftBytes(uncompressedSize);\r\n        } else {\r\n            data = this._readData(sock);\r\n            if (data === null) {\r\n                return false;\r\n            }\r\n\r\n            this._zlibs[streamId].setInput(data);\r\n            data = this._zlibs[streamId].inflate(uncompressedSize);\r\n            this._zlibs[streamId].setInput(null);\r\n        }\r\n\r\n        let rgbx = new Uint8Array(width * height * 4);\r\n        for (let i = 0, j = 0; i < width * height * 4; i += 4, j += 3) {\r\n            rgbx[i]     = data[j];\r\n            rgbx[i + 1] = data[j + 1];\r\n            rgbx[i + 2] = data[j + 2];\r\n            rgbx[i + 3] = 255;  // Alpha\r\n        }\r\n\r\n        display.blitImage(x, y, width, height, rgbx, 0, false);\r\n\r\n        return true;\r\n    }\r\n\r\n    _paletteFilter(streamId, x, y, width, height, sock, display, depth) {\r\n        if (this._numColors === 0) {\r\n            if (sock.rQwait(\"TIGHT palette\", 1)) {\r\n                return false;\r\n            }\r\n\r\n            const numColors = sock.rQpeek8() + 1;\r\n            const paletteSize = numColors * 3;\r\n\r\n            if (sock.rQwait(\"TIGHT palette\", 1 + paletteSize)) {\r\n                return false;\r\n            }\r\n\r\n            this._numColors = numColors;\r\n            sock.rQskipBytes(1);\r\n\r\n            sock.rQshiftTo(this._palette, paletteSize);\r\n        }\r\n\r\n        const bpp = (this._numColors <= 2) ? 1 : 8;\r\n        const rowSize = Math.floor((width * bpp + 7) / 8);\r\n        const uncompressedSize = rowSize * height;\r\n\r\n        let data;\r\n\r\n        if (uncompressedSize === 0) {\r\n            return true;\r\n        }\r\n\r\n        if (uncompressedSize < 12) {\r\n            if (sock.rQwait(\"TIGHT\", uncompressedSize)) {\r\n                return false;\r\n            }\r\n\r\n            data = sock.rQshiftBytes(uncompressedSize);\r\n        } else {\r\n            data = this._readData(sock);\r\n            if (data === null) {\r\n                return false;\r\n            }\r\n\r\n            this._zlibs[streamId].setInput(data);\r\n            data = this._zlibs[streamId].inflate(uncompressedSize);\r\n            this._zlibs[streamId].setInput(null);\r\n        }\r\n\r\n        // Convert indexed (palette based) image data to RGB\r\n        if (this._numColors == 2) {\r\n            this._monoRect(x, y, width, height, data, this._palette, display);\r\n        } else {\r\n            this._paletteRect(x, y, width, height, data, this._palette, display);\r\n        }\r\n\r\n        this._numColors = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    _monoRect(x, y, width, height, data, palette, display) {\r\n        // Convert indexed (palette based) image data to RGB\r\n        // TODO: reduce number of calculations inside loop\r\n        const dest = this._getScratchBuffer(width * height * 4);\r\n        const w = Math.floor((width + 7) / 8);\r\n        const w1 = Math.floor(width / 8);\r\n\r\n        for (let y = 0; y < height; y++) {\r\n            let dp, sp, x;\r\n            for (x = 0; x < w1; x++) {\r\n                for (let b = 7; b >= 0; b--) {\r\n                    dp = (y * width + x * 8 + 7 - b) * 4;\r\n                    sp = (data[y * w + x] >> b & 1) * 3;\r\n                    dest[dp]     = palette[sp];\r\n                    dest[dp + 1] = palette[sp + 1];\r\n                    dest[dp + 2] = palette[sp + 2];\r\n                    dest[dp + 3] = 255;\r\n                }\r\n            }\r\n\r\n            for (let b = 7; b >= 8 - width % 8; b--) {\r\n                dp = (y * width + x * 8 + 7 - b) * 4;\r\n                sp = (data[y * w + x] >> b & 1) * 3;\r\n                dest[dp]     = palette[sp];\r\n                dest[dp + 1] = palette[sp + 1];\r\n                dest[dp + 2] = palette[sp + 2];\r\n                dest[dp + 3] = 255;\r\n            }\r\n        }\r\n\r\n        display.blitImage(x, y, width, height, dest, 0, false);\r\n    }\r\n\r\n    _paletteRect(x, y, width, height, data, palette, display) {\r\n        // Convert indexed (palette based) image data to RGB\r\n        const dest = this._getScratchBuffer(width * height * 4);\r\n        const total = width * height * 4;\r\n        for (let i = 0, j = 0; i < total; i += 4, j++) {\r\n            const sp = data[j] * 3;\r\n            dest[i]     = palette[sp];\r\n            dest[i + 1] = palette[sp + 1];\r\n            dest[i + 2] = palette[sp + 2];\r\n            dest[i + 3] = 255;\r\n        }\r\n\r\n        display.blitImage(x, y, width, height, dest, 0, false);\r\n    }\r\n\r\n    _gradientFilter(streamId, x, y, width, height, sock, display, depth) {\r\n        throw new Error(\"Gradient filter not implemented\");\r\n    }\r\n\r\n    _readData(sock) {\r\n        if (this._len === 0) {\r\n            if (sock.rQwait(\"TIGHT\", 3)) {\r\n                return null;\r\n            }\r\n\r\n            let byte;\r\n\r\n            byte = sock.rQshift8();\r\n            this._len = byte & 0x7f;\r\n            if (byte & 0x80) {\r\n                byte = sock.rQshift8();\r\n                this._len |= (byte & 0x7f) << 7;\r\n                if (byte & 0x80) {\r\n                    byte = sock.rQshift8();\r\n                    this._len |= byte << 14;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (sock.rQwait(\"TIGHT\", this._len)) {\r\n            return null;\r\n        }\r\n\r\n        let data = sock.rQshiftBytes(this._len);\r\n        this._len = 0;\r\n\r\n        return data;\r\n    }\r\n\r\n    _getScratchBuffer(size) {\r\n        if (!this._scratchBuffer || (this._scratchBuffer.length < size)) {\r\n            this._scratchBuffer = new Uint8Array(size);\r\n        }\r\n        return this._scratchBuffer;\r\n    }\r\n}\r\n"]}