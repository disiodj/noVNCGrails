{"version":3,"sources":["raw.js"],"names":["RawDecoder","_lines","x","y","width","height","sock","display","depth","pixelSize","bytesPerLine","rQwait","curY","currHeight","Math","min","floor","rQlen","pixels","data","rQ","index","rQi","newdata","Uint8Array","i","blitImage","rQskipBytes"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAEqBA,U;AACjB,wBAAc;AAAA;;AACV,SAAKC,MAAL,GAAc,CAAd;AACH;;;;+BAEUC,C,EAAGC,C,EAAGC,K,EAAOC,M,EAAQC,I,EAAMC,O,EAASC,K,EAAO;AAClD,UAAKJ,KAAK,KAAK,CAAX,IAAkBC,MAAM,KAAK,CAAjC,EAAqC;AACjC,eAAO,IAAP;AACH;;AAED,UAAI,KAAKJ,MAAL,KAAgB,CAApB,EAAuB;AACnB,aAAKA,MAAL,GAAcI,MAAd;AACH;;AAED,UAAMI,SAAS,GAAGD,KAAK,IAAI,CAAT,GAAa,CAAb,GAAiB,CAAnC;AACA,UAAME,YAAY,GAAGN,KAAK,GAAGK,SAA7B;;AAEA,UAAIH,IAAI,CAACK,MAAL,CAAY,KAAZ,EAAmBD,YAAnB,CAAJ,EAAsC;AAClC,eAAO,KAAP;AACH;;AAED,UAAME,IAAI,GAAGT,CAAC,IAAIE,MAAM,GAAG,KAAKJ,MAAlB,CAAd;AACA,UAAMY,UAAU,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAKd,MAAd,EACSa,IAAI,CAACE,KAAL,CAAWV,IAAI,CAACW,KAAL,GAAaP,YAAxB,CADT,CAAnB;AAEA,UAAMQ,MAAM,GAAGd,KAAK,GAAGS,UAAvB;AAEA,UAAIM,IAAI,GAAGb,IAAI,CAACc,EAAhB;AACA,UAAIC,KAAK,GAAGf,IAAI,CAACgB,GAAjB,CAtBkD,CAwBlD;;AACA,UAAId,KAAK,IAAI,CAAb,EAAgB;AACZ,YAAMe,OAAO,GAAG,IAAIC,UAAJ,CAAeN,MAAM,GAAG,CAAxB,CAAhB;;AACA,aAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,MAApB,EAA4BO,CAAC,EAA7B,EAAiC;AAC7BF,UAAAA,OAAO,CAACE,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAP,GAAqB,CAAEN,IAAI,CAACE,KAAK,GAAGI,CAAT,CAAJ,IAAmB,CAApB,GAAyB,GAA1B,IAAiC,GAAjC,GAAuC,CAA5D;AACAF,UAAAA,OAAO,CAACE,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAP,GAAqB,CAAEN,IAAI,CAACE,KAAK,GAAGI,CAAT,CAAJ,IAAmB,CAApB,GAAyB,GAA1B,IAAiC,GAAjC,GAAuC,CAA5D;AACAF,UAAAA,OAAO,CAACE,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAP,GAAqB,CAAEN,IAAI,CAACE,KAAK,GAAGI,CAAT,CAAJ,IAAmB,CAApB,GAAyB,GAA1B,IAAiC,GAAjC,GAAuC,CAA5D;AACAF,UAAAA,OAAO,CAACE,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAP,GAAqB,GAArB;AACH;;AACDN,QAAAA,IAAI,GAAGI,OAAP;AACAF,QAAAA,KAAK,GAAG,CAAR;AACH,OAnCiD,CAqClD;;;AACA,WAAK,IAAII,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGP,MAApB,EAA4BO,EAAC,EAA7B,EAAiC;AAC7BN,QAAAA,IAAI,CAACM,EAAC,GAAG,CAAJ,GAAQ,CAAT,CAAJ,GAAkB,GAAlB;AACH;;AAEDlB,MAAAA,OAAO,CAACmB,SAAR,CAAkBxB,CAAlB,EAAqBU,IAArB,EAA2BR,KAA3B,EAAkCS,UAAlC,EAA8CM,IAA9C,EAAoDE,KAApD;AACAf,MAAAA,IAAI,CAACqB,WAAL,CAAiBd,UAAU,GAAGH,YAA9B;AACA,WAAKT,MAAL,IAAeY,UAAf;;AACA,UAAI,KAAKZ,MAAL,GAAc,CAAlB,EAAqB;AACjB,eAAO,KAAP;AACH;;AAED,aAAO,IAAP;AACH","sourcesContent":["/*\r\n * noVNC: HTML5 VNC client\r\n * Copyright (C) 2019 The noVNC Authors\r\n * Licensed under MPL 2.0 (see LICENSE.txt)\r\n *\r\n * See README.md for usage and integration instructions.\r\n *\r\n */\r\n\r\nexport default class RawDecoder {\r\n    constructor() {\r\n        this._lines = 0;\r\n    }\r\n\r\n    decodeRect(x, y, width, height, sock, display, depth) {\r\n        if ((width === 0) || (height === 0)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._lines === 0) {\r\n            this._lines = height;\r\n        }\r\n\r\n        const pixelSize = depth == 8 ? 1 : 4;\r\n        const bytesPerLine = width * pixelSize;\r\n\r\n        if (sock.rQwait(\"RAW\", bytesPerLine)) {\r\n            return false;\r\n        }\r\n\r\n        const curY = y + (height - this._lines);\r\n        const currHeight = Math.min(this._lines,\r\n                                    Math.floor(sock.rQlen / bytesPerLine));\r\n        const pixels = width * currHeight;\r\n\r\n        let data = sock.rQ;\r\n        let index = sock.rQi;\r\n\r\n        // Convert data if needed\r\n        if (depth == 8) {\r\n            const newdata = new Uint8Array(pixels * 4);\r\n            for (let i = 0; i < pixels; i++) {\r\n                newdata[i * 4 + 0] = ((data[index + i] >> 0) & 0x3) * 255 / 3;\r\n                newdata[i * 4 + 1] = ((data[index + i] >> 2) & 0x3) * 255 / 3;\r\n                newdata[i * 4 + 2] = ((data[index + i] >> 4) & 0x3) * 255 / 3;\r\n                newdata[i * 4 + 3] = 255;\r\n            }\r\n            data = newdata;\r\n            index = 0;\r\n        }\r\n\r\n        // Max sure the image is fully opaque\r\n        for (let i = 0; i < pixels; i++) {\r\n            data[i * 4 + 3] = 255;\r\n        }\r\n\r\n        display.blitImage(x, curY, width, currHeight, data, index);\r\n        sock.rQskipBytes(currHeight * bytesPerLine);\r\n        this._lines -= currHeight;\r\n        if (this._lines > 0) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n"]}