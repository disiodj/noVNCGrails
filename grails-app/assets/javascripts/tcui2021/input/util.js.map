{"version":3,"sources":["util.js"],"names":["getKeycode","evt","code","keyCode","vkeys","browser","isMac","location","getKey","key","undefined","fixedkeys","charCode","String","fromCharCode","getKeysym","DOMKeyTable","KeyTable","XK_Meta_L","XK_Meta_R","XK_Num_Lock","isWindows","XK_Zenkaku_Hankaku","XK_Romaji","length","codepoint","charCodeAt","keysyms","lookup"],"mappings":"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","sourcesContent":["import KeyTable from \"./keysym.js\";\r\nimport keysyms from \"./keysymdef.js\";\r\nimport vkeys from \"./vkeys.js\";\r\nimport fixedkeys from \"./fixedkeys.js\";\r\nimport DOMKeyTable from \"./domkeytable.js\";\r\nimport * as browser from \"../util/browser.js\";\r\n\r\n// Get 'KeyboardEvent.code', handling legacy browsers\r\nexport function getKeycode(evt) {\r\n    // Are we getting proper key identifiers?\r\n    // (unfortunately Firefox and Chrome are crappy here and gives\r\n    // us an empty string on some platforms, rather than leaving it\r\n    // undefined)\r\n    if (evt.code) {\r\n        // Mozilla isn't fully in sync with the spec yet\r\n        switch (evt.code) {\r\n            case 'OSLeft': return 'MetaLeft';\r\n            case 'OSRight': return 'MetaRight';\r\n        }\r\n\r\n        return evt.code;\r\n    }\r\n\r\n    // The de-facto standard is to use Windows Virtual-Key codes\r\n    // in the 'keyCode' field for non-printable characters\r\n    if (evt.keyCode in vkeys) {\r\n        let code = vkeys[evt.keyCode];\r\n\r\n        // macOS has messed up this code for some reason\r\n        if (browser.isMac() && (code === 'ContextMenu')) {\r\n            code = 'MetaRight';\r\n        }\r\n\r\n        // The keyCode doesn't distinguish between left and right\r\n        // for the standard modifiers\r\n        if (evt.location === 2) {\r\n            switch (code) {\r\n                case 'ShiftLeft': return 'ShiftRight';\r\n                case 'ControlLeft': return 'ControlRight';\r\n                case 'AltLeft': return 'AltRight';\r\n            }\r\n        }\r\n\r\n        // Nor a bunch of the numpad keys\r\n        if (evt.location === 3) {\r\n            switch (code) {\r\n                case 'Delete': return 'NumpadDecimal';\r\n                case 'Insert': return 'Numpad0';\r\n                case 'End': return 'Numpad1';\r\n                case 'ArrowDown': return 'Numpad2';\r\n                case 'PageDown': return 'Numpad3';\r\n                case 'ArrowLeft': return 'Numpad4';\r\n                case 'ArrowRight': return 'Numpad6';\r\n                case 'Home': return 'Numpad7';\r\n                case 'ArrowUp': return 'Numpad8';\r\n                case 'PageUp': return 'Numpad9';\r\n                case 'Enter': return 'NumpadEnter';\r\n            }\r\n        }\r\n\r\n        return code;\r\n    }\r\n\r\n    return 'Unidentified';\r\n}\r\n\r\n// Get 'KeyboardEvent.key', handling legacy browsers\r\nexport function getKey(evt) {\r\n    // Are we getting a proper key value?\r\n    if (evt.key !== undefined) {\r\n        // Mozilla isn't fully in sync with the spec yet\r\n        switch (evt.key) {\r\n            case 'OS': return 'Meta';\r\n            case 'LaunchMyComputer': return 'LaunchApplication1';\r\n            case 'LaunchCalculator': return 'LaunchApplication2';\r\n        }\r\n\r\n        // iOS leaks some OS names\r\n        switch (evt.key) {\r\n            case 'UIKeyInputUpArrow': return 'ArrowUp';\r\n            case 'UIKeyInputDownArrow': return 'ArrowDown';\r\n            case 'UIKeyInputLeftArrow': return 'ArrowLeft';\r\n            case 'UIKeyInputRightArrow': return 'ArrowRight';\r\n            case 'UIKeyInputEscape': return 'Escape';\r\n        }\r\n\r\n        // Broken behaviour in Chrome\r\n        if ((evt.key === '\\x00') && (evt.code === 'NumpadDecimal')) {\r\n            return 'Delete';\r\n        }\r\n\r\n        return evt.key;\r\n    }\r\n\r\n    // Try to deduce it based on the physical key\r\n    const code = getKeycode(evt);\r\n    if (code in fixedkeys) {\r\n        return fixedkeys[code];\r\n    }\r\n\r\n    // If that failed, then see if we have a printable character\r\n    if (evt.charCode) {\r\n        return String.fromCharCode(evt.charCode);\r\n    }\r\n\r\n    // At this point we have nothing left to go on\r\n    return 'Unidentified';\r\n}\r\n\r\n// Get the most reliable keysym value we can get from a key event\r\nexport function getKeysym(evt) {\r\n    const key = getKey(evt);\r\n\r\n    if (key === 'Unidentified') {\r\n        return null;\r\n    }\r\n\r\n    // First look up special keys\r\n    if (key in DOMKeyTable) {\r\n        let location = evt.location;\r\n\r\n        // Safari screws up location for the right cmd key\r\n        if ((key === 'Meta') && (location === 0)) {\r\n            location = 2;\r\n        }\r\n\r\n        // And for Clear\r\n        if ((key === 'Clear') && (location === 3)) {\r\n            let code = getKeycode(evt);\r\n            if (code === 'NumLock') {\r\n                location = 0;\r\n            }\r\n        }\r\n\r\n        if ((location === undefined) || (location > 3)) {\r\n            location = 0;\r\n        }\r\n\r\n        // The original Meta key now gets confused with the Windows key\r\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1020141\r\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1232918\r\n        if (key === 'Meta') {\r\n            let code = getKeycode(evt);\r\n            if (code === 'AltLeft') {\r\n                return KeyTable.XK_Meta_L;\r\n            } else if (code === 'AltRight') {\r\n                return KeyTable.XK_Meta_R;\r\n            }\r\n        }\r\n\r\n        // macOS has Clear instead of NumLock, but the remote system is\r\n        // probably not macOS, so lying here is probably best...\r\n        if (key === 'Clear') {\r\n            let code = getKeycode(evt);\r\n            if (code === 'NumLock') {\r\n                return KeyTable.XK_Num_Lock;\r\n            }\r\n        }\r\n\r\n        // Windows sends alternating symbols for some keys when using a\r\n        // Japanese layout. We have no way of synchronising with the IM\r\n        // running on the remote system, so we send some combined keysym\r\n        // instead and hope for the best.\r\n        if (browser.isWindows()) {\r\n            switch (key) {\r\n                case 'Zenkaku':\r\n                case 'Hankaku':\r\n                    return KeyTable.XK_Zenkaku_Hankaku;\r\n                case 'Romaji':\r\n                case 'KanaMode':\r\n                    return KeyTable.XK_Romaji;\r\n            }\r\n        }\r\n\r\n        return DOMKeyTable[key][location];\r\n    }\r\n\r\n    // Now we need to look at the Unicode symbol instead\r\n\r\n    // Special key? (FIXME: Should have been caught earlier)\r\n    if (key.length !== 1) {\r\n        return null;\r\n    }\r\n\r\n    const codepoint = key.charCodeAt();\r\n    if (codepoint) {\r\n        return keysyms.lookup(codepoint);\r\n    }\r\n\r\n    return null;\r\n}\r\n"]}