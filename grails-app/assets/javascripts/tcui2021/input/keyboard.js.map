{"version":3,"sources":["keyboard.js"],"names":["Keyboard","target","_target","_keyDownList","_altGrArmed","_eventHandlers","_handleKeyUp","bind","_handleKeyDown","_allKeysUp","onkeyevent","keysym","code","down","Log","Debug","e","KeyboardUtil","getKeycode","keyCode","keyIdentifier","substr","codepoint","parseInt","char","String","fromCharCode","toUpperCase","charCodeAt","_getKeyCode","getKeysym","clearTimeout","_altGrTimeout","timeStamp","_altGrCtrlTime","KeyTable","XK_ISO_Level3_Shift","_sendKeyEvent","XK_Control_L","browser","isMac","isIOS","XK_Super_L","XK_Alt_L","XK_Super_R","XK_Mode_switch","XK_Alt_R","XK_Caps_Lock","jpBadKeys","XK_Zenkaku_Hankaku","XK_Eisu_toggle","XK_Katakana","XK_Hiragana","XK_Romaji","isWindows","includes","setTimeout","_handleAltGrTimeout","addEventListener","keydown","keyup","window","blur","removeEventListener"],"mappings":"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","sourcesContent":["/*\r\n * noVNC: HTML5 VNC client\r\n * Copyright (C) 2019 The noVNC Authors\r\n * Licensed under MPL 2.0 or any later version (see LICENSE.txt)\r\n */\r\n\r\nimport * as Log from '../util/logging.js';\r\nimport { stopEvent } from '../util/events.js';\r\nimport * as KeyboardUtil from \"./util.js\";\r\nimport KeyTable from \"./keysym.js\";\r\nimport * as browser from \"../util/browser.js\";\r\n\r\n//\r\n// Keyboard event handler\r\n//\r\n\r\nexport default class Keyboard {\r\n    constructor(target) {\r\n        this._target = target || null;\r\n\r\n        this._keyDownList = {};         // List of depressed keys\r\n                                        // (even if they are happy)\r\n        this._altGrArmed = false;       // Windows AltGr detection\r\n\r\n        // keep these here so we can refer to them later\r\n        this._eventHandlers = {\r\n            'keyup': this._handleKeyUp.bind(this),\r\n            'keydown': this._handleKeyDown.bind(this),\r\n            'blur': this._allKeysUp.bind(this),\r\n        };\r\n\r\n        // ===== EVENT HANDLERS =====\r\n\r\n        this.onkeyevent = () => {}; // Handler for key press/release\r\n    }\r\n\r\n    // ===== PRIVATE METHODS =====\r\n\r\n    _sendKeyEvent(keysym, code, down) {\r\n        if (down) {\r\n            this._keyDownList[code] = keysym;\r\n        } else {\r\n            // Do we really think this key is down?\r\n            if (!(code in this._keyDownList)) {\r\n                return;\r\n            }\r\n            delete this._keyDownList[code];\r\n        }\r\n\r\n        Log.Debug(\"onkeyevent \" + (down ? \"down\" : \"up\") +\r\n                  \", keysym: \" + keysym, \", code: \" + code);\r\n        this.onkeyevent(keysym, code, down);\r\n    }\r\n\r\n    _getKeyCode(e) {\r\n        const code = KeyboardUtil.getKeycode(e);\r\n        if (code !== 'Unidentified') {\r\n            return code;\r\n        }\r\n\r\n        // Unstable, but we don't have anything else to go on\r\n        if (e.keyCode) {\r\n            // 229 is used for composition events\r\n            if (e.keyCode !== 229) {\r\n                return 'Platform' + e.keyCode;\r\n            }\r\n        }\r\n\r\n        // A precursor to the final DOM3 standard. Unfortunately it\r\n        // is not layout independent, so it is as bad as using keyCode\r\n        if (e.keyIdentifier) {\r\n            // Non-character key?\r\n            if (e.keyIdentifier.substr(0, 2) !== 'U+') {\r\n                return e.keyIdentifier;\r\n            }\r\n\r\n            const codepoint = parseInt(e.keyIdentifier.substr(2), 16);\r\n            const char = String.fromCharCode(codepoint).toUpperCase();\r\n\r\n            return 'Platform' + char.charCodeAt();\r\n        }\r\n\r\n        return 'Unidentified';\r\n    }\r\n\r\n    _handleKeyDown(e) {\r\n        const code = this._getKeyCode(e);\r\n        let keysym = KeyboardUtil.getKeysym(e);\r\n\r\n        // Windows doesn't have a proper AltGr, but handles it using\r\n        // fake Ctrl+Alt. However the remote end might not be Windows,\r\n        // so we need to merge those in to a single AltGr event. We\r\n        // detect this case by seeing the two key events directly after\r\n        // each other with a very short time between them (<50ms).\r\n        if (this._altGrArmed) {\r\n            this._altGrArmed = false;\r\n            clearTimeout(this._altGrTimeout);\r\n\r\n            if ((code === \"AltRight\") &&\r\n                ((e.timeStamp - this._altGrCtrlTime) < 50)) {\r\n                // FIXME: We fail to detect this if either Ctrl key is\r\n                //        first manually pressed as Windows then no\r\n                //        longer sends the fake Ctrl down event. It\r\n                //        does however happily send real Ctrl events\r\n                //        even when AltGr is already down. Some\r\n                //        browsers detect this for us though and set the\r\n                //        key to \"AltGraph\".\r\n                keysym = KeyTable.XK_ISO_Level3_Shift;\r\n            } else {\r\n                this._sendKeyEvent(KeyTable.XK_Control_L, \"ControlLeft\", true);\r\n            }\r\n        }\r\n\r\n        // We cannot handle keys we cannot track, but we also need\r\n        // to deal with virtual keyboards which omit key info\r\n        if (code === 'Unidentified') {\r\n            if (keysym) {\r\n                // If it's a virtual keyboard then it should be\r\n                // sufficient to just send press and release right\r\n                // after each other\r\n                this._sendKeyEvent(keysym, code, true);\r\n                this._sendKeyEvent(keysym, code, false);\r\n            }\r\n\r\n            stopEvent(e);\r\n            return;\r\n        }\r\n\r\n        // Alt behaves more like AltGraph on macOS, so shuffle the\r\n        // keys around a bit to make things more sane for the remote\r\n        // server. This method is used by RealVNC and TigerVNC (and\r\n        // possibly others).\r\n        if (browser.isMac() || browser.isIOS()) {\r\n            switch (keysym) {\r\n                case KeyTable.XK_Super_L:\r\n                    keysym = KeyTable.XK_Alt_L;\r\n                    break;\r\n                case KeyTable.XK_Super_R:\r\n                    keysym = KeyTable.XK_Super_L;\r\n                    break;\r\n                case KeyTable.XK_Alt_L:\r\n                    keysym = KeyTable.XK_Mode_switch;\r\n                    break;\r\n                case KeyTable.XK_Alt_R:\r\n                    keysym = KeyTable.XK_ISO_Level3_Shift;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Is this key already pressed? If so, then we must use the\r\n        // same keysym or we'll confuse the server\r\n        if (code in this._keyDownList) {\r\n            keysym = this._keyDownList[code];\r\n        }\r\n\r\n        // macOS doesn't send proper key events for modifiers, only\r\n        // state change events. That gets extra confusing for CapsLock\r\n        // which toggles on each press, but not on release. So pretend\r\n        // it was a quick press and release of the button.\r\n        if ((browser.isMac() || browser.isIOS()) && (code === 'CapsLock')) {\r\n            this._sendKeyEvent(KeyTable.XK_Caps_Lock, 'CapsLock', true);\r\n            this._sendKeyEvent(KeyTable.XK_Caps_Lock, 'CapsLock', false);\r\n            stopEvent(e);\r\n            return;\r\n        }\r\n\r\n        // Windows doesn't send proper key releases for a bunch of\r\n        // Japanese IM keys so we have to fake the release right away\r\n        const jpBadKeys = [ KeyTable.XK_Zenkaku_Hankaku,\r\n                            KeyTable.XK_Eisu_toggle,\r\n                            KeyTable.XK_Katakana,\r\n                            KeyTable.XK_Hiragana,\r\n                            KeyTable.XK_Romaji ];\r\n        if (browser.isWindows() && jpBadKeys.includes(keysym)) {\r\n            this._sendKeyEvent(keysym, code, true);\r\n            this._sendKeyEvent(keysym, code, false);\r\n            stopEvent(e);\r\n            return;\r\n        }\r\n\r\n        stopEvent(e);\r\n\r\n        // Possible start of AltGr sequence? (see above)\r\n        if ((code === \"ControlLeft\") && browser.isWindows() &&\r\n            !(\"ControlLeft\" in this._keyDownList)) {\r\n            this._altGrArmed = true;\r\n            this._altGrTimeout = setTimeout(this._handleAltGrTimeout.bind(this), 100);\r\n            this._altGrCtrlTime = e.timeStamp;\r\n            return;\r\n        }\r\n\r\n        this._sendKeyEvent(keysym, code, true);\r\n    }\r\n\r\n    _handleKeyUp(e) {\r\n        stopEvent(e);\r\n\r\n        const code = this._getKeyCode(e);\r\n\r\n        // We can't get a release in the middle of an AltGr sequence, so\r\n        // abort that detection\r\n        if (this._altGrArmed) {\r\n            this._altGrArmed = false;\r\n            clearTimeout(this._altGrTimeout);\r\n            this._sendKeyEvent(KeyTable.XK_Control_L, \"ControlLeft\", true);\r\n        }\r\n\r\n        // See comment in _handleKeyDown()\r\n        if ((browser.isMac() || browser.isIOS()) && (code === 'CapsLock')) {\r\n            this._sendKeyEvent(KeyTable.XK_Caps_Lock, 'CapsLock', true);\r\n            this._sendKeyEvent(KeyTable.XK_Caps_Lock, 'CapsLock', false);\r\n            return;\r\n        }\r\n\r\n        this._sendKeyEvent(this._keyDownList[code], code, false);\r\n\r\n        // Windows has a rather nasty bug where it won't send key\r\n        // release events for a Shift button if the other Shift is still\r\n        // pressed\r\n        if (browser.isWindows() && ((code === 'ShiftLeft') ||\r\n                                    (code === 'ShiftRight'))) {\r\n            if ('ShiftRight' in this._keyDownList) {\r\n                this._sendKeyEvent(this._keyDownList['ShiftRight'],\r\n                                   'ShiftRight', false);\r\n            }\r\n            if ('ShiftLeft' in this._keyDownList) {\r\n                this._sendKeyEvent(this._keyDownList['ShiftLeft'],\r\n                                   'ShiftLeft', false);\r\n            }\r\n        }\r\n    }\r\n\r\n    _handleAltGrTimeout() {\r\n        this._altGrArmed = false;\r\n        clearTimeout(this._altGrTimeout);\r\n        this._sendKeyEvent(KeyTable.XK_Control_L, \"ControlLeft\", true);\r\n    }\r\n\r\n    _allKeysUp() {\r\n        Log.Debug(\">> Keyboard.allKeysUp\");\r\n        for (let code in this._keyDownList) {\r\n            this._sendKeyEvent(this._keyDownList[code], code, false);\r\n        }\r\n        Log.Debug(\"<< Keyboard.allKeysUp\");\r\n    }\r\n\r\n    // ===== PUBLIC METHODS =====\r\n\r\n    grab() {\r\n        //Log.Debug(\">> Keyboard.grab\");\r\n\r\n        this._target.addEventListener('keydown', this._eventHandlers.keydown);\r\n        this._target.addEventListener('keyup', this._eventHandlers.keyup);\r\n\r\n        // Release (key up) if window loses focus\r\n        window.addEventListener('blur', this._eventHandlers.blur);\r\n\r\n        //Log.Debug(\"<< Keyboard.grab\");\r\n    }\r\n\r\n    ungrab() {\r\n        //Log.Debug(\">> Keyboard.ungrab\");\r\n\r\n        this._target.removeEventListener('keydown', this._eventHandlers.keydown);\r\n        this._target.removeEventListener('keyup', this._eventHandlers.keyup);\r\n        window.removeEventListener('blur', this._eventHandlers.blur);\r\n\r\n        // Release (key up) all keys that are in a down state\r\n        this._allKeysUp();\r\n\r\n        //Log.Debug(\">> Keyboard.ungrab\");\r\n    }\r\n}\r\n"]}